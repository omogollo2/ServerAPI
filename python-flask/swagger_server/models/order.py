# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.client import Client  # noqa: F401,E501
from swagger_server.models.product import Product  # noqa: F401,E501
from swagger_server import util


class Order(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, order_date: date=None, ship_date: date=None, items: List[Product]=None, total_price: int=None, ship_address: str=None, client: Client=None):  # noqa: E501
        """Order - a model defined in Swagger

        :param order_date: The order_date of this Order.  # noqa: E501
        :type order_date: date
        :param ship_date: The ship_date of this Order.  # noqa: E501
        :type ship_date: date
        :param items: The items of this Order.  # noqa: E501
        :type items: List[Product]
        :param total_price: The total_price of this Order.  # noqa: E501
        :type total_price: int
        :param ship_address: The ship_address of this Order.  # noqa: E501
        :type ship_address: str
        :param client: The client of this Order.  # noqa: E501
        :type client: Client
        """
        self.swagger_types = {
            'order_date': date,
            'ship_date': date,
            'items': List[Product],
            'total_price': int,
            'ship_address': str,
            'client': Client
        }

        self.attribute_map = {
            'order_date': 'orderDate',
            'ship_date': 'shipDate',
            'items': 'items',
            'total_price': 'totalPrice',
            'ship_address': 'shipAddress',
            'client': 'client'
        }
        self._order_date = order_date
        self._ship_date = ship_date
        self._items = items
        self._total_price = total_price
        self._ship_address = ship_address
        self._client = client

    @classmethod
    def from_dict(cls, dikt) -> 'Order':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Order of this Order.  # noqa: E501
        :rtype: Order
        """
        return util.deserialize_model(dikt, cls)

    @property
    def order_date(self) -> date:
        """Gets the order_date of this Order.


        :return: The order_date of this Order.
        :rtype: date
        """
        return self._order_date

    @order_date.setter
    def order_date(self, order_date: date):
        """Sets the order_date of this Order.


        :param order_date: The order_date of this Order.
        :type order_date: date
        """
        if order_date is None:
            raise ValueError("Invalid value for `order_date`, must not be `None`")  # noqa: E501

        self._order_date = order_date

    @property
    def ship_date(self) -> date:
        """Gets the ship_date of this Order.


        :return: The ship_date of this Order.
        :rtype: date
        """
        return self._ship_date

    @ship_date.setter
    def ship_date(self, ship_date: date):
        """Sets the ship_date of this Order.


        :param ship_date: The ship_date of this Order.
        :type ship_date: date
        """
        if ship_date is None:
            raise ValueError("Invalid value for `ship_date`, must not be `None`")  # noqa: E501

        self._ship_date = ship_date

    @property
    def items(self) -> List[Product]:
        """Gets the items of this Order.


        :return: The items of this Order.
        :rtype: List[Product]
        """
        return self._items

    @items.setter
    def items(self, items: List[Product]):
        """Sets the items of this Order.


        :param items: The items of this Order.
        :type items: List[Product]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")  # noqa: E501

        self._items = items

    @property
    def total_price(self) -> int:
        """Gets the total_price of this Order.


        :return: The total_price of this Order.
        :rtype: int
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price: int):
        """Sets the total_price of this Order.


        :param total_price: The total_price of this Order.
        :type total_price: int
        """
        if total_price is None:
            raise ValueError("Invalid value for `total_price`, must not be `None`")  # noqa: E501

        self._total_price = total_price

    @property
    def ship_address(self) -> str:
        """Gets the ship_address of this Order.


        :return: The ship_address of this Order.
        :rtype: str
        """
        return self._ship_address

    @ship_address.setter
    def ship_address(self, ship_address: str):
        """Sets the ship_address of this Order.


        :param ship_address: The ship_address of this Order.
        :type ship_address: str
        """
        if ship_address is None:
            raise ValueError("Invalid value for `ship_address`, must not be `None`")  # noqa: E501

        self._ship_address = ship_address

    @property
    def client(self) -> Client:
        """Gets the client of this Order.


        :return: The client of this Order.
        :rtype: Client
        """
        return self._client

    @client.setter
    def client(self, client: Client):
        """Sets the client of this Order.


        :param client: The client of this Order.
        :type client: Client
        """
        if client is None:
            raise ValueError("Invalid value for `client`, must not be `None`")  # noqa: E501

        self._client = client
